@page "/hashtable"
@using DataStructureVisualizer.DataStructures

<h1>Hash Table Visualizer</h1>

<div class="description">
    <h2>What is a Hash Table?</h2>
    <p>
        A hash table is a data structure that stores key-value pairs and provides fast insertion, deletion, and lookup operations.
        It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.
    </p>
    <h2>Common Use Cases:</h2>
    <ul>
        <li>Implementing dictionary or map data structures</li>
        <li>Caching mechanisms</li>
        <li>Symbol tables in compilers and interpreters</li>
        <li>Unique data representation</li>
    </ul>
    <h2>How to Use:</h2>
    <ol>
        <li>Enter a key and value in the input fields.</li>
        <li>Click the "Add" button to insert the key-value pair into the hash table.</li>
        <li>To remove an entry, enter the key and click the "Remove" button.</li>
        <li>To search for a value, enter the key and click the "Search" button.</li>
    </ol>
</div>

<div class="input-container">
    <div class="input-group">
        <label for="key">Key:</label>
        <input id="key" @bind="key" />
    </div>
    <div class="input-group">
        <label for="value">Value:</label>
        <input id="value" @bind="value" />
    </div>
    <div class="button-group">
        <button class="btn btn-primary" @onclick="AddEntry">Add</button>
        <button class="btn btn-secondary" @onclick="RemoveEntry">Remove</button>
        <button class="btn btn-info" @onclick="SearchEntry">Search</button>
    </div>
</div>

<div class="hashtable-container">
    @{
    var buckets = hashtable.GetBuckets();
    for (int i = 0; i < buckets.Length; i++)
    {
    var bucket = buckets[i];
    <div class="bucket">
        <h4>Bucket @i</h4>
        @foreach (var entry in bucket)
        {
        <div class="entry">
            <span class="key">@entry.Key</span>
            <span class="value">@entry.Value</span>
        </div>
        }
    </div>
    }
    }
</div>

<div class="search-result">
    @if (showSearchResult)
    {
    @if (searchResult != null)
    {
    <p>Value found: @searchResult</p>
    }
    else
    {
    <p>Key not found in the hash table.</p>
    }
    }
</div>

@code {
    private HashTable<string, int> hashtable = new HashTable<string, int>();
    private string key;
    private int value;
    private bool showSearchResult;
    private int? searchResult;

    private void AddEntry()
    {
        hashtable.Add(key, value);
    }

    private void RemoveEntry()
    {
        hashtable.Remove(key);
    }

    private void SearchEntry()
    {
        showSearchResult = true;
        if (hashtable.TryGetValue(key, out var val))
        {
            searchResult = val;
        }
        else
        {
            searchResult = null;
        }
    }
}